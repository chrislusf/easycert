// Copyright 2013 Jonas mg
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

package main

import (
	"fmt"
	"strconv"
	"strings"
)

const TEMPLATE_GO = `// MACHINE GENERATED BY easycert (github.com/kless/easycert)
// From {{.System}} ({{.Arch}}) with "{{.Version}}", on {{.Date}}
// Valid for: {{.ValidUntil}}

package {{.Package}}

import (
	"crypto/tls"
	"crypto/x509"
	"log"
)

var TLSConfig *tls.Config

// Load certificate
func init() {
	CA_CERT_BLOCK := {{.CACert}}

	CERT_BLOCK := {{.Cert}}

	KEY_BLOCK := {{.Key}}

	cert, err := tls.X509KeyPair(CERT_BLOCK, KEY_BLOCK)
	if err != nil {
		log.Fatal("load keys: ", err)
	}

	certPool := x509.NewCertPool()
	if ok := certPool.AppendCertsFromPEM(CA_CERT_BLOCK); !ok {
		log.Fatal("CA certificate not valid")
	}

	TLSConfig = &tls.Config{
		Certificates: []tls.Certificate{cert},
		RootCAs:      certPool,
		// Can add other configuration fields
	}
}
`

// GoBlock represents the definition of a "[]byte" in Go.
type GoBlock []byte

func (b GoBlock) String() string {
	s := make([]string, len(b))

	for i, v := range b {
		if i != 0 && i%17 == 0 {
			s[i-1] = s[i-1][:len(s[i-1])-1] // remove anterior space
			s[i] = "\n\t\t"
		}
		s[i] += fmt.Sprintf("%s, ", strconv.Itoa(int(v)))
	}

	i := len(s) - 1
	s[i] = s[i][:len(s[i])-1] // remove last space

	return fmt.Sprintf("[]byte{\n\t\t%s\n\t}", strings.Join(s, ""))
}
